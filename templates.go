// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/index.html
// templates/layout.html

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x6f\xa3\x3a\x10\x7d\xef\xaf\x18\xa1\x3e\x5e\x07\x25\xb9\xb7" +
	"\xea\xad\x9a\xbc\x6c\x57\xab\x4a\xab\x6e\xb5\xda\x3f\x60\xf0\x04\xbc\x35\x36\xb2\x4d\x20\xb2\xf8\xef\x2b\x1b\xf2" +
	"\x01\xa1\x6d\x5a\x6d\x1e\x22\x1c\x66\x8e\xcf\x9c\x33\x33\x71\x4e\x53\x99\x21\x5c\x33\xba\x83\xbb\x15\xcc\x1e\xa8" +
	"\xa5\x6d\x7b\x75\xcf\xf8\xf6\x0a\xfa\x4f\x2a\xa8\x31\xab\x28\x11\x2a\x7d\x81\x46\xdc\x75\x0f\x35\xd9\x54\x42\xf8" +
	"\x73\x4d\xe6\xf1\x7f\x50\x24\xe4\x5f\x28\x77\xe4\x06\xca\x86\x2c\x81\xd1\x9d\x73\x7c\x13\x90\x67\x8f\xe6\x97\x62" +
	"\x74\xd7\xb6\x60\x8a\xbb\x2d\x37\x3c\x11\xe8\x1c\x0a\x83\x6d\x0b\x39\x67\x0c\xa5\x73\x28\x59\xdb\x46\x87\x5b\x19" +
	"\xb5\x94\x30\xba\x5b\x45\xce\x75\x28\x0f\xd4\x22\x9c\x85\x48\x6c\xec\x30\xee\x09\x1b\x3b\x1d\x5b\x6a\xdc\x72\x55" +
	"\x99\x61\xfc\x73\xff\xeb\x21\x67\x1d\xb2\xbc\x06\xfb\xda\xfb\x62\x37\x02\x9b\xf0\x45\xb4\xaa\x81\x5b\x2c\x0c\x49" +
	"\x51\x5a\xd4\xbe\xfc\x5b\xd0\x28\xa8\xe5\x5b\x8c\xd6\x87\x7b\x4f\x51\x0e\x0a\x76\x25\x43\x4d\x6e\x9d\xbb\xf6\xa4" +
	"\xfc\xd5\xdf\x51\x66\x36\xf7\x2e\x08\x94\xe7\xcc\xda\x36\xe8\x29\x2c\x8c\x33\xe6\x67\x22\x1e\xaf\x0f\x14\x92\xca" +
	"\x5a\x25\xf7\x2c\x18\xdd\x11\x53\x73\x9b\xe6\xa8\xa3\x4e\x97\xee\x48\x18\xd7\x98\x5a\xae\xe4\x2a\x4a\x68\xfa\x32" +
	"\x82\x09\x50\xbc\xc8\x86\x9a\x44\x60\x74\xba\x8a\x66\xb3\x98\x1a\x83\xd6\xc4\xbc\xa0\x19\x9a\x98\x6a\xad\x6a\x22" +
	"\x70\x63\x67\x66\x9b\x45\x10\x8f\x38\xc5\x1d\xa9\x13\xa1\x62\xc6\xb7\xd3\xba\x05\xc5\xe7\xe3\xaa\xf2\xc5\xfe\xbd" +
	"\xf5\x2d\xb0\x68\x04\x84\x87\xce\x90\x68\xed\x1c\xcc\x9e\x68\x81\x6d\x7b\x1f\xe7\x8b\x71\xf2\x72\x90\x3c\x95\xdb" +
	"\x89\x7e\x1f\xe7\xcb\x8b\x48\x4e\x9b\x2b\xfb\x5e\x9c\x30\x77\xdf\xa6\x27\xc6\x8e\xa2\xcf\x8d\xfd\x80\x5d\x9f\x71" +
	"\x7d\xa3\x74\x4d\x35\xfb\x0b\xc6\x6b\x9e\xe5\x9f\x70\xfe\xe4\xd1\x39\xe8\x77\x53\xa6\x55\x55\x3e\x4a\x86\xcd\x3f" +
	"\xfd\xc1\xeb\x18\x34\xfc\xe6\x4f\x5c\x66\x3f\x34\x43\x0d\x6d\x3b\xe9\x4c\x61\xc9\x0d\x74\xf6\x4c\x0c\xe8\x38\x3a" +
	"\xf4\x81\xc8\xfc\x40\x2f\xba\xa6\xf0\x4d\x1c\x5a\xa2\xbf\xdc\x37\xc5\xb0\x0d\x86\xc7\x03\x73\xee\x39\x77\x44\xbf" +
	"\x4a\xab\x39\x9a\x23\xc4\xab\xf7\xbf\xcf\x76\x9c\xd1\x2f\xa7\x92\x2c\x41\xab\x4a\x32\x64\x60\x72\xca\x54\x4d\x0a" +
	"\x06\x49\x46\xea\x9c\x5b\x84\x52\xab\x4c\xd3\xa2\x20\x89\x6a\x26\x00\xa7\x80\x0f\x29\xc6\x6a\x5e\xa2\xc7\xf2\x83" +
	"\xf1\x45\x09\xe5\xc5\x8e\xd6\xa3\xc2\xdf\xc2\x1a\xae\xce\xbe\x85\x5e\x4f\x9d\x4a\x27\xf3\x93\x05\x9c\x2a\x01\xbf" +
	"\x2b\x63\xf9\x66\x47\x68\x28\xfb\x1d\xb4\x49\x9f\x1b\xe1\x7d\xa6\x95\x55\x90\x68\xa4\x2f\xa4\x56\x9a\x99\xe3\xee" +
	"\x38\xf7\xfa\x55\xe8\xf2\xc4\xc0\x05\x6c\x94\xb4\x44\x56\x92\x5b\xd5\x6f\x13\x34\xa9\xe6\xa5\x9f\xb3\x00\x5a\x7e" +
	"\x8c\xad\x07\xed\x80\x7e\xa2\x29\x95\x0c\x7f\xa1\xcf\xa8\x8d\x92\xe6\x32\x92\x97\x84\x0c\x9a\xea\xff\x4b\x04\xbd" +
	"\x78\x2d\x78\xea\x8f\x69\x28\x7e\x72\x2d\x7c\x90\xee\x1b\xaf\x27\x5e\x9d\x0f\x28\x4a\xb6\x1f\xc2\xe3\xa9\x0f\xeb" +
	"\x97\xed\x9f\x00\x00\x00\xff\xff\xdc\xe5\x9b\x61\x1c\x09\x00\x00")

func bindataTemplatesIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesIndexhtml,
		"templates/index.html",
	)
}



func bindataTemplatesIndexhtml() (*asset, error) {
	bytes, err := bindataTemplatesIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/index.html",
		size: 2332,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1528980024, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesLayouthtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x8f\x9b\x3c\x10\xbe\xf3\x2b\x46\xbe\xbe\xaf\x21\xd9\x56\xab" +
	"\x2a\x82\x54\x55\xef\x55\xa5\xf6\xd4\x9b\x31\x13\xf0\x76\xfc\x21\xcf\x6c\x02\x5a\xed\x7f\xaf\x08\x44\x42\x51\x7a" +
	"\xe9\x05\x06\xfc\x7c\x79\x3c\xae\x07\xf1\x74\x2c\x8a\x7a\x40\xd3\x1d\x0b\x00\x80\x9a\x5c\xf8\x0d\x43\xc6\x53\xa3" +
	"\x06\x91\xc4\x87\xaa\x3a\xc5\x20\x5c\xf6\x31\xf6\x84\x26\x39\x2e\x6d\xf4\x95\x65\xfe\x7c\x32\xde\xd1\xd4\x7c\xf1" +
	"\x46\x9c\xfd\xef\xc7\x57\x05\x19\xa9\x51\x2c\x13\x21\x0f\x88\xa2\xfe\x5d\xf4\xdb\x6b\x70\x12\x0f\x1f\x76\xbb\xbf" +
	"\xaa\x8a\x13\xc2\xe3\x2f\x24\x21\xd3\x63\x86\xa7\xdd\xfe\x13\x7c\x27\x13\x5e\x43\x5f\x57\xcb\xea\xc6\xff\x5e\x05" +
	"\x64\x4a\xd8\x28\xc1\x51\x66\x63\xb5\x06\x34\xcc\x28\x5c\x2d\xc0\x72\x5e\x58\x45\x3c\x8a\x81\x60\x3c\x36\xea\xec" +
	"\xf0\x92\x62\x16\x05\x36\x06\xc1\x20\x8d\xba\xb8\x4e\x86\xa6\xc3\xb3\xb3\xa8\xaf\x1f\xff\x83\x0b\x4e\x9c\x21\xcd" +
	"\xd6\x10\x36\xfb\x72\xa7\x8e\x45\x5d\x2d\xcd\x2e\xea\x36\x76\x13\x58\x32\xcc\x8d\x9a\xbb\xa1\xd9\x04\x86\x6b\xd5" +
	"\x46\xea\xd4\x8c\xe9\xdc\xf9\x06\x69\x7b\x3d\x21\x51\xbc\x40\xdb\xeb\x36\x8a\x44\xaf\x59\xb2\x4b\x78\x0b\xb8\x01" +
	"\xcf\xb1\x8c\x0b\x98\x21\x4d\xfa\x19\x52\xab\x77\x30\xd2\x21\xb5\xfa\x79\x45\xdf\x33\x4e\x84\x23\xcc\x0f\x7d\xc9" +
	"\x26\x2d\x95\x8d\x04\x4e\xd0\xb3\xb6\x18\x04\xf3\x86\x7a\xa5\x0f\xfb\x1b\x7b\x6e\xa2\x1e\x09\xd8\x1f\xae\xe5\xd3" +
	"\x48\xe0\x65\x36\xfb\x69\x7a\xe4\x94\x63\x9f\x8d\xf7\x75\x35\xec\x37\xf6\x55\xe7\xce\x6b\xf6\xa5\x5c\x5f\xc5\xc3" +
	"\xad\x3c\xd8\xe6\x48\x87\xbb\xdc\xbe\xd5\x1f\x6f\x87\xb2\x89\xfb\xf6\x06\x93\x43\xea\xe0\xfd\xfd\xa1\x1f\xdb\xec" +
	"\x92\x6c\x27\xe2\xc5\x9c\xcd\xf2\x57\x01\x67\xdb\xa8\xb2\xac\xd6\xd1\x30\x29\x95\x2f\xac\xc0\xf0\x14\xec\xb1\xae" +
	"\x16\xd8\xac\x36\x1f\xe9\x2c\x57\x5d\x2f\xd6\x9f\x00\x00\x00\xff\xff\x7f\x65\x7e\x12\x5f\x03\x00\x00")

func bindataTemplatesLayouthtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesLayouthtml,
		"templates/layout.html",
	)
}



func bindataTemplatesLayouthtml() (*asset, error) {
	bytes, err := bindataTemplatesLayouthtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/layout.html",
		size: 863,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1528982101, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/index.html":  bindataTemplatesIndexhtml,
	"templates/layout.html": bindataTemplatesLayouthtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"index.html": {Func: bindataTemplatesIndexhtml, Children: map[string]*bintree{}},
		"layout.html": {Func: bindataTemplatesLayouthtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
